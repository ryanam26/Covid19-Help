{"version":3,"sources":["Auth.js","NavBar/NavBar.js","Question/SubmitAnswer.js","Question/Question.js","Questions/Questions.js","Callback.js","NewQuestion/NewQuestion.js","SecuredRoute/SecuredRoute.js","App.js","serviceWorker.js","index.js"],"names":["auth0Client","this","auth0","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","idToken","Date","getTime","expiresAt","authorize","Promise","resolve","reject","parseHash","err","authResult","setSession","idTokenPayload","exp","logout","returnTo","checkSession","withRouter","props","className","to","onClick","name","history","replace","SubmitAnswer","state","answer","value","setState","submitAnswer","window","location","reload","htmlFor","id","type","onChange","e","updateAnswer","target","placeholder","length","submit","Component","Question","question","refreshQuestion","params","match","axios","get","questionId","data","post","headers","getIdToken","animationIn","animationOut","animationInDuration","animationOutDuration","isVisible","title","description","answers","reverse","map","idx","key","Questions","questions","Callback","NewQuestion","disabled","push","onBlur","updateTitle","updateDescription","SecuredRoute","component","path","checkingSession","render","App","pathname","silentAuth","forceUpdate","error","console","log","class","exact","Boolean","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7f693adc.chunk.js","sourcesContent":["import auth0 from 'auth0-js';\r\n\r\nclass Auth {\r\n  constructor() {\r\n    this.auth0 = new auth0.WebAuth({\r\n      // the following three lines MUST be updated\r\n      domain: 'dev-8phuysyw.auth0.com',\r\n      audience: 'https://dev-8phuysyw.auth0.com/userinfo',\r\n      clientID: 'VaTIJDgVoTChhck5JhspfFo8FoUv3LLT',\r\n      redirectUri: 'http://localhost:3000/callback',\r\n      responseType: 'id_token',\r\n      scope: 'openid profile'\r\n    });\r\n\r\n    this.getProfile = this.getProfile.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.signIn = this.signIn.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n\r\n  getProfile() {\r\n    return this.profile;\r\n  }\r\n\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return new Date().getTime() < this.expiresAt;\r\n  }\r\n\r\n  signIn() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        if (err) return reject(err);\r\n        if (!authResult || !authResult.idToken) {\r\n          return reject(err);\r\n        }\r\n        this.setSession(authResult);\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n\r\n  setSession(authResult) {\r\n    this.idToken = authResult.idToken;\r\n    this.profile = authResult.idTokenPayload;\r\n    // set the time that the id token will expire at\r\n    this.expiresAt = authResult.idTokenPayload.exp * 1000;\r\n  }\r\n\r\n  signOut() {\r\n    this.auth0.logout({\r\n      returnTo: 'http://localhost:3000',\r\n      clientID: 'VaTIJDgVoTChhck5JhspfFo8FoUv3LLT',\r\n    });\r\n  }\r\n\r\n  silentAuth() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.checkSession({}, (err, authResult) => {\r\n        if (err) return reject(err);\r\n        this.setSession(authResult);\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nconst auth0Client = new Auth();\r\n\r\nexport default auth0Client;","import React from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\n\r\nfunction NavBar(props) {\r\n  const signOut = () => {\r\n    auth0Client.signOut();\r\n    props.history.replace('/');\r\n  };\r\n\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-primary fixed-top\">\r\n      <Link className=\"navbar-brand\" to=\"/\">\r\n        Covid19 - Help\r\n      </Link>\r\n      {\r\n        !auth0Client.isAuthenticated() &&\r\n        <button className=\"btn btn-dark\" onClick={auth0Client.signIn}>Sign In</button>\r\n      }\r\n      {\r\n        auth0Client.isAuthenticated() &&\r\n        <div>\r\n          <label className=\"mr-2 text-white\">{auth0Client.getProfile().name}</label>\r\n          <button className=\"btn btn-dark\" onClick={() => {signOut()}}>Sign Out</button>\r\n        </div>\r\n      }\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default withRouter(NavBar);","import React, {Component, Fragment} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\nimport \"./q.css\"\r\n\r\nclass SubmitAnswer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      answer: '',\r\n    };\r\n  }\r\n\r\n  updateAnswer(value) {\r\n    this.setState({\r\n      answer: value,\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.props.submitAnswer(this.state.answer);\r\n\r\n    this.setState({\r\n      answer: '',\r\n    });\r\n    window.location.reload()\r\n  }\r\n\r\n  render() {\r\n    \r\n    if (!auth0Client.isAuthenticated()) return null;\r\n    return (\r\n      <Fragment>\r\n        <div className=\"form-group text-center\">\r\n          <label htmlFor=\"exampleInputEmail1\">How can you help:</label>\r\n          <input\r\n            id=\"answer-input\"\r\n            type=\"text\"\r\n            onChange={(e) => {this.updateAnswer(e.target.value)}}\r\n            className=\"form-control\"\r\n            placeholder=\"I can help with....\"\r\n            value={this.state.answer}\r\n          />\r\n        </div>\r\n\r\n          <button\r\n            id=\"answer-button\"\r\n            className={`btn btn-primary ${this.state.answer.length > 0 ? \"enable\" : \"disable\"}`}\r\n            onClick={() => { this.submit() }}\r\n          >\r\n            Submit\r\n          </button>\r\n          <hr className=\"my-4\" />\r\n      </Fragment>\r\n    )\r\n    \r\n  }\r\n}\r\n\r\nexport default withRouter(SubmitAnswer);","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport SubmitAnswer from './SubmitAnswer';\r\nimport auth0Client from '../Auth';\r\nimport { Animated } from \"react-animated-css\";\r\n\r\nimport \"./q.css\"\r\n\r\nclass Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: null,\r\n    };\r\n\r\n    this.submitAnswer = this.submitAnswer.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.refreshQuestion();\r\n  }\r\n\r\n  async refreshQuestion() {\r\n    const { match: { params } } = this.props;\r\n    const question = (await axios.get(`http://localhost:5000/${params.questionId}`)).data;\r\n    this.setState({\r\n      question,\r\n    });\r\n  }\r\n\r\n  async submitAnswer(answer) {\r\n    await axios.post(`http://localhost:5000/answer/${this.state.question.id}`, {\r\n      answer,\r\n    }, {\r\n      headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\r\n    });\r\n    await this.refreshQuestion();\r\n  }\r\n\r\n  render() {\r\n    const {question} = this.state;\r\n    if (question === null) return <p>Loading ...</p>;\r\n    \r\n    return (\r\n      <Animated animationIn=\"fadeIn\" animationOut=\"zoomOutDown\" animationInDuration={800} animationOutDuration={1000} isVisible={true}>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"jumbotron col-12\">\r\n            <h1 className=\"display-3\">{question.title}</h1>\r\n            <p className=\"lead\">{question.description}</p>\r\n            <hr className=\"my-4\" />\r\n            <SubmitAnswer questionId={question.id} submitAnswer={this.submitAnswer} />\r\n              <p>\r\n                Answers:\r\n              </p>\r\n            {\r\n              question.answers.reverse().map((answer, idx) => (\r\n                <p className=\"lead q-p\" key={idx}>{answer}</p>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n        </div>\r\n        </Animated>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Question;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass Questions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const questions = (await axios.get('http://localhost:5000/')).data;\r\n    this.setState({\r\n      questions,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Link to=\"/new-question\">\r\n            <div className=\"card text-white bg-secondary mb-3\">\r\n              <div className=\"card-header\">Need help? Ask here!</div>\r\n              <div className=\"card-body\">\r\n                <h4 className=\"card-title\">+ New Question</h4>\r\n                <p className=\"card-text\">Don't worry. Help is on the way!</p>\r\n              </div>\r\n            </div>\r\n          </Link>\r\n          {this.state.questions === null && <p>Loading questions...</p>}\r\n          {\r\n            this.state.questions && this.state.questions.map(question => (\r\n              <div key={question.id} className=\"col-sm-12 col-md-4 col-lg-3\">\r\n                <Link to={`/question/${question.id}`}>\r\n                  <div className=\"card text-white bg-success mb-3\">\r\n                    <div className=\"card-header\">Answers: {question.answers}</div>\r\n                    <div className=\"card-body\">\r\n                      <h4 className=\"card-title\">{question.title}</h4>\r\n                      <p className=\"card-text\">{question.description}</p>\r\n                    </div>\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Questions;","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from './Auth';\r\n\r\nclass Callback extends Component {\r\n    async componentDidMount() {\r\n        await auth0Client.handleAuthentication();\r\n        this.props.history.replace('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <p>Loading profile...</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Callback);","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\nimport axios from 'axios';\r\n\r\nclass NewQuestion extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      disabled: false,\r\n      title: '',\r\n      description: '',\r\n    };\r\n  }\r\n\r\n  updateDescription(value) {\r\n    this.setState({\r\n      description: value,\r\n    });\r\n  }\r\n\r\n  updateTitle(value) {\r\n    this.setState({\r\n      title: value,\r\n    });\r\n  }\r\n\r\n  async submit() {\r\n    this.setState({\r\n      disabled: true,\r\n    });\r\n\r\n    await axios.post('http://localhost:5000', {\r\n      title: this.state.title,\r\n      description: this.state.description,\r\n    }, {\r\n      headers: { 'Authorization': `Bearer ${auth0Client.getIdToken()}` }\r\n    });\r\n\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"card border-primary\">\r\n              <div className=\"card-header\">What do you need help with?</div>\r\n              <div className=\"card-body text-left\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"exampleInputEmail1\">What city are you?</label>\r\n                  <input\r\n                    disabled={this.state.disabled}\r\n                    type=\"text\"\r\n                    onBlur={(e) => {this.updateTitle(e.target.value)}}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter your city\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"exampleInputEmail1\">Description:</label>\r\n                  <input\r\n                    disabled={this.state.disabled}\r\n                    type=\"text\"\r\n                    onBlur={(e) => {this.updateDescription(e.target.value)}}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Describe what you need help with.\"\r\n                  />\r\n                </div>\r\n                <button\r\n                  disabled={this.state.disabled}\r\n                  className=\"btn btn-primary\"\r\n                  onClick={() => {this.submit()}}>\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(NewQuestion);","import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\nimport auth0Client from '../Auth';\r\n\r\nfunction SecuredRoute(props) {\r\n  const {component: Component, path, checkingSession} = props;\r\n  return (\r\n    <Route path={path} render={() => {\r\n      if (checkingSession) return <h3 className=\"text-center\">Validating session...</h3>;\r\n      if (!auth0Client.isAuthenticated()) {\r\n        auth0Client.signIn();\r\n        return <div></div>;\r\n      }\r\n      return <Component />\r\n    }} />\r\n  );\r\n}\r\n\r\nexport default SecuredRoute;","import React, { Component } from 'react';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport auth0Client from './Auth';\r\nimport NavBar from './NavBar/NavBar';\r\nimport Question from './Question/Question';\r\nimport Questions from './Questions/Questions';\r\nimport Callback from './Callback';\r\nimport NewQuestion from './NewQuestion/NewQuestion';\r\nimport SecuredRoute from './SecuredRoute/SecuredRoute';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checkingSession: true,\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    if (this.props.location.pathname === '/callback') {\r\n      this.setState({checkingSession:false});\r\n      return;\r\n    }\r\n    try {\r\n      await auth0Client.silentAuth();\r\n      this.forceUpdate();\r\n    } catch (err) {\r\n      if (err.error !== 'login_required') console.log(err.error);\r\n    }\r\n    this.setState({checkingSession:false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p class=\"text-center\">This is a test</p>\r\n        <NavBar/>\r\n        <Route exact path='/' component={Questions}/>\r\n        <Route exact path='/question/:questionId' component={Question}/>\r\n        <Route exact path='/callback' component={Callback}/>\r\n        <SecuredRoute path='/new-question'\r\n                      component={NewQuestion}\r\n                      checkingSession={this.state.checkingSession} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}